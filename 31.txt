다음 배열 내장함수의 시간 복잡도가 O(1)이 아닌 것을 모두 고르시오. 

1) arr[i]
2) arr.push(5)
3) arr.slice()
4) arr.pop()
5) arr.includes(5)
'
※
시간 복잡도는 알고리즘을 처리하는 데 얼마의 시간이 걸리는지 알려줍니다. 
알고리즘의 성능을 수학적으로 표현해주는 표기법이 바로 Big-O 표기법입니다. 
O(1)은 입력되는 데이터의 크기와 상관없이 알고리즘이 문제를 해결하는 속도가 모두 일정할 때 표기해줄 수 있습니다. 
arr [i]의 경우 i의 값이 0이거나 아무리 높은 값의 숫자라도, 하나의 인덱스를 선택하는 것이라서 시간 복잡도는 O(1)입니다.
arr.push(5)의 경우에도 배열의 가장 끝에 매개변수 값을 집어넣으면 됩니다. 
배열이 아무리 커도 마지막 끝에 원소를 넣는 것이기 때문에 시간 복잡도는 O(1)입니다.
arr.slice()의 경우 매개변수만큼 잘라서 새로운 배열을 반환하는 것입니다. 
배열의 크기가 커지면 커질수록 사용되는 메모리가 많아지기 때문에 시간 복잡도는 O(1)이 아닙니다.
arr.pop()의 경우 배열의 가장 끝에 있는 원소를 제거하는 것입니다. 배열의 크기가 아무리 커도 마지막의 원소를 제거하면 됩니다. 
그렇기 때문에 시간 복잡도는 O(1)입니다.
arr.includes(5)의 경우 매개변수가 배열에 들어있는지 확인하는 메서드입니다. 
배열의 크기가 커지면 커질수록, 탐색해야 하는 값도 많아지기 때문에 시간 복잡도는 O(1)이 아닙니다.